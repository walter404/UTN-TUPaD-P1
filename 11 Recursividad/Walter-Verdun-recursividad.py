"""1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa 
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros 
entre 1 y el n√∫mero que indique el usuario"""

def factorial(x):
    if x == 1:
        return 1
    else:
        return x * factorial(x - 1)

numero = int(input("Ingrese un numero: "))

for i in range(1, numero + 1):
    print(factorial(i))

"""2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n 
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario 
especifique."""

def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return (fibonacci(n-1) + fibonacci(n-2))
    
numero = int(input("Ingresar un numero: "))

for i in range(numero + 1):
    print(fibonacci(i))

"""3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un 
exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un 
algoritmo general. """

def potencia(b, e):
    if e == 0:
        return 1
    else:
        return b * potencia(b, e - 1)

b = float(input("Ingrese un numero base: "))
e = int(input("Ingrese un exponente entero, no negativo: "))

resultado = potencia(b, e)

print(f"{b} elevado a la {e} es: {resultado}")

"""4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base 
decimal y devuelva su representaci√≥n en binario como una cadena de texto. 
Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y 
unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este 
procedimiento: 
1. Dividir el n√∫mero por 2. 
2. Guardar el resto (0 o 1). 
3. Repetir el proceso con el cociente hasta que llegue a 0. 
4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario. """

def binario(n): 
    if n == 0:#caso base, ahi de detiene la recursion
        return ""
    else:
        return binario(n // 2) + str(n % 2)# la funcion divide el numero por 2 y concatena el resto (n % 2) como una cadena
    
numero = int(input("Ingresar un numero entero positivo: "))

conversion = binario(numero)

print(f"El numero {numero} en binario es: {conversion}")

"""5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una 
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no 
lo es. 
    Requisitos: 
La soluci√≥n debe ser recursiva. 
No se debe usar [::-1] ni la funci√≥n reversed(). """

def es_palidromo(palabra):
    if len(palabra) <= 1:
        return True
    elif palabra[0] != palabra[-1]:
        return False
    
    return es_palidromo(palabra[1:-1])


texto = input("Ingrese una palabra, sin tilde ni espacio: ").lower()

if es_palidromo(texto):
    print(f"{texto} es un polidromo")
else:
    print(f"{texto} no es un polidromo")

"""6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un 
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 
    Restricciones: 
No se puede convertir el n√∫mero a string. 
Us√° operaciones matem√°ticas (%, //) y recursi√≥n. """

def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)# n % 10 obtiene el ultimo digito del numero n//10 elimina el ultimo digito (divide entre 10 sin decimal)

numero = int(input("Ingres un numero: "))

resultado = suma_digitos(numero)

print(f"La suma de {numero} es: {resultado} ")

"""7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n 
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al 
√∫ltimo nivel con un solo bloque. 

Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el 
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la 
pir√°mide."""

def contar_bloques(n):
    if n == 1:
        return 1
    else: 
        return n + contar_bloques(n-1)

primer_nivel = int(input("Ingrese el numero de bloques del nivel bajo: "))

total = contar_bloques(primer_nivel)

print(f"El total de bloques es: {total}")


"""8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un 
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces 
aparece ese d√≠gito dentro del n√∫mero."""

def contar_digito(numero, digito):
    if numero < 10:
        if numero == digito:
            return 1
        else:
            return 0
    else:
        ultimo_numero = numero % 10 #obtenemos el ultimo digito del numero
        resto = numero // 10 #elimina el ultimo digito del numero

        if ultimo_numero == digito:
            return 1 + contar_digito(resto, digito)
        else:
            return 0 + contar_digito(resto, digito)

    
num = int(input("Ingrese un numero: "))
dig = int(input("Ingrese el digito a contar 0-9: "))

cantidad = contar_digito(num, dig)

print(f"El digito {dig} aparece {cantidad} veces,  en el numero {num}")